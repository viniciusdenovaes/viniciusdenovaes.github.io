# jemdoc: menu{../../../../../../MENU}{index.html}{../../../../../../}
= Laboratório 03 - Herança Abstrata
[../../../../../../index.html Vinicius de Novaes Pereira]

=== Para este laboratório você deve fazer um programa que tenha as classes do diagrama abaixo.

~~~
{}{img_left}{diagrama_animal_abstrata.svg}{Diagrama do Programa Animal}{}{}{}
~~~

=== E testar com as seguintes classes: 

~~~
{Veterinario.java}{}

public class Veterinario {
	
	public static void cuidaDoAnimal(Animal animal) {
		System.out.println("Recebendo um " + animal.getClass());
		System.out.print(animal);
		if(animal.getDoente() == false) {
			System.out.println("O animal está ok!");
			return;
		}
		System.out.println("Dando comida para " + animal.getNome());
		animal.procuraComida();
		Veterinario.curaAnimal(animal);
		animal.dorme();
		System.out.println("Pode levar o animal");
		System.out.println("");
	}
	
	private static void curaAnimal(Animal animal) {
		System.out.println("Aplicando vacina");
		animal.setDoente(false);
		animal.fazBarulho();
		System.out.println("Animal curado");
	}

}
~~~

~~~
{TesteAnimal.java}{}
import java.util.ArrayList;
import java.util.List;

public class TesteAnimal {
	
	public static void main(String[] args) {
		
		List<Animal> animais = new ArrayList<>();
		
		Cachorro cachorro = new Cachorro();
		cachorro.setNome("Brutus");
		cachorro.setIdade(15);
		cachorro.setDoente(true);
		animais.add(cachorro);
		
		Gato gato = new Gato();
		gato.setNome("Cesar");
		gato.setIdade(5);
		gato.setDoente(false);
		animais.add(gato);
		
		Lobo lobo = new Lobo();
		lobo.setNome("Nymeria");
		lobo.setIdade(3);
		lobo.setDoente(true);
		animais.add(lobo);
		
		for(Animal animal : animais) {
			Veterinario.cuidaDoAnimal(animal);
		}
		
	}

}
~~~



== Classe Animal

~~~
{}{img_left}{diagrama_animal.svg}{Diagrama do Programa Animal}{}{}{}
~~~

Uma classe *abstrata* que modele um Animal, 
 - que tenha os campos +private+:
 -- "nome", que seja uma +String+, 
 -- "idade", que seja um +int+, 
 -- "doente", que seja um +boolean+, 
 - que tenha os métodos de acesso aos campos
 -- +public String getNome()+ que retorna o nome do animal
 -- +public void setNome(String aNome)+ que define o nome do animal
 -- +public int getIdade()+ que retorna a idade do animal
 -- +public void setIdade(int aIdade)+ que define a idade do animal
 -- +public boolean getDoente()+ que retorna se o animal está doente
 -- +public void setDoente(boolean aDoente)+ que define se o animal está doente
 - que tenha o método +public void dormir()+ que imprima na tela "ZZZZZZ";
 - que tenha os métodos abstratos
 -- +public void procuraComida();+
 -- +public void fazBarulho();+
 - que faça *override* do método toString:
~~~
{Override de toString em Animal.java}{}
	@Override
	public String toString() {
		String resultado = "";
		resultado += "Sou um animal " + this.getClass() + "\n";
		resultado += "Nome: " + this.getNome() + "\n";
		resultado += "Idade: " + this.getIdade() + "\n";
		return resultado;
	}
~~~

== Classe Abstrata Canino

~~~
{}{img_left}{diagrama_canino.svg}{Diagrama do Programa Pessoa}{}{}{}
~~~

Uma classe abstrata Canino que é uma subclasse da classe Animal, e que
 - tenha o método +public void latir()+ que imprima na tela "Au Au Au"
 - implemente o método +public void fazBarulho()+ chamando o método +latir()+


== Classe Abstrata Felino

~~~
{}{img_left}{diagrama_felino.svg}{Diagrama do Programa Pessoa}{}{}{}
~~~

Uma classe abstrata Felino que é uma subclasse da classe Animal, e que
 - tenha o método +public void miar()+ que imprima na tela "Miau"
 - implemente o método +public void fazBarulho()+ chamando o método +miar()+

== Classe Cachorro

~~~
{}{img_left}{diagrama_cachorro.svg}{Diagrama do Programa Pessoa}{}{}{}
~~~

Uma classe concreta Cachorro que é uma subclasse da classe Canino, e que
 - implemente o método +public void procuraComida()+ imprimindo na tela "Fica pedindo comida"

== Classe Lobo

~~~
{}{img_left}{diagrama_lobo.svg}{Diagrama do Programa Pessoa}{}{}{}
~~~

Uma classe concreta Lobo que é uma subclasse da classe Canino, e que
 - implemente o método +public void procuraComida()+ imprimindo na tela "Caça com a matilha"

== Classe Gato

~~~
{}{img_left}{diagrama_gato.svg}{Diagrama do Programa Pessoa}{}{}{}
~~~

Uma classe concreta Gato que é uma subclasse da classe Felino, e que
 - implemente o método +public void procuraComida()+ imprimindo na tela "caça ratos"

 

