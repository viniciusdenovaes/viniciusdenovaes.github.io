# jemdoc: menu{../../../../../../MENU}{index.html}{../../../../../../}
= Laboratório 02A - Herança
[../../../../../../index.html Vinicius de Novaes Pereira]

=== Para este laboratório você deve fazer um programa que tenha as classes do diagrama abaixo.

~~~
{}{img_left}{diagrama_pessoa_heranca.svg}{Diagrama do Programa Pessoa}{}{}{}
~~~

=== E testar com as seguintes classes: 

~~~
{Secretaria.java}{}
public class Secretaria {
	
	public static void imprimeRelatorio(Pessoa pessoa) {
		pessoa.relatorio();
	}
	
	public static void fazPagamento(Funcionario funcionario) {
		System.out.println("Pagando " + funcionario.getPagamento() + " ao funcionario " + funcionario.getNome());
		System.out.println();
	}

}
~~~

~~~
{Teste.java}{}

public class Teste {
	
	public static void main(String[] args) {
		
//		Pessoa pessoa = new Pessoa();
//		pessoa.setId("001");
//		pessoa.setNome("Fernando");
//		Secretaria.imprimeRelatorio(pessoa);
		
//		Aluno alunoA = new Aluno();
//		alunoA.setId("002");
//		alunoA.setNome("Galileu");
//		alunoA.setNotaNP1(new Nota(-2.0));
//		alunoA.setNotaNP2(new Nota(5.0));
//		Secretaria.imprimeRelatorio(alunoA);
		
//		Aluno alunoB = new Aluno();
//		alunoB.setId("003");
//		alunoB.setNome("Einstein");
//		alunoB.setNotaNP1(12.0);
//		alunoB.setNotaNP2(7.0);
//		Secretaria.imprimeRelatorio(alunoB);
		
//		Funcionario funcionario = new Funcionario();
//		funcionario.setId("004");
//		funcionario.setNome("Chico");
//		funcionario.setSalario(700);
//		Secretaria.imprimeRelatorio(funcionario);
//		Secretaria.fazPagamento(funcionario);
		
//		Gerente gerente = new Gerente();
//		gerente.setId("005");
//		gerente.setNome("Simaria");
//		gerente.setSalario(300);
//		gerente.setBonus(700);
//		Secretaria.imprimeRelatorio(gerente);
//		Secretaria.fazPagamento(gerente);
		
	}

}
~~~


== Faça nesta ordem: 

 . Copie as classes "Secretaria.java" e "Teste.java".
 . Faça a classe "Pessoa".
 . Teste a sua classe "descomentando" o bloco que cria e testa "Pessoa".
 . Faça a classe "Funcionario".
 . Teste a sua classe "descomentando" o bloco que cria e testa "Funcionario".
 . Faça a classe "Gerente".
 . Teste a sua classe "descomentando" o bloco que cria e testa "Gerente".
 . Faça a classe "Nota".
 . Faça a classe "Boletim".
 . Faça a classe "Aluno".
 . Teste a sua classe "descomentando" o bloco que cria e testa "Aluno".

== Classe Pessoa 

~~~
{}{img_left}{diagrama_pessoa.svg}{Diagrama do Programa Pessoa}{}{}{}
~~~

Uma classe que modele uma Pessoa no corpo de participantes de uma faculdade, 
 - que tenha os campos +private+:
 -- "id", que seja uma +String+, 
 -- "nome", que seja uma +String+, 
 - que tenha os métodos de acesso aos campos
 -- +public String getId()+ que retorna o id da pessoa
 -- +public void setId(String aId)+ que define o id da pessoa
 -- +public String getNome()+ que retorna o nome da pessoa
 -- +public void setNome(String aNome)+ que define o nome da pessoa
 - que tenha o método para imprimir seus dados
 -- +public void relatorio()+ que imprime o nome da classe ("Pessoa"), o id, e o nome

== Classe Funcionario

~~~
{}{img_left}{diagrama_funcionario.svg}{Diagrama do Programa Pessoa}{}{}{}
~~~

Uma classe que modele um Funcionario, subclasse de Pessoa, 
 - que tenha os campos +private+
 -- "salario", que seja um +double+, 
 - que tenha os métodos de acesso aos campos
 -- +public double getSalario()+ que retorna o salário do funcionário
 -- +public void setSalario(double aSalario)+ que define o salário do funcionario
 -- +public double getPagamento()+ que retorna o valor do pagamento (igual ao salário)
 - que tenha o método para imprimir seus dados
 -- +public void relatorio()+ que imprime o nome da classe ("Funcionario"), o id, o nome, o salário e o pagamento

== Classe Gerente

~~~
{}{img_left}{diagrama_gerente.svg}{Diagrama do Programa Pessoa}{}{}{}
~~~

Uma classe que modele um Gerente, subclasse de Funcionario, 
 - que tenha os campos +private+
 -- "bonus", que seja um +double+, 
 - que tenha os métodos de acesso aos campos
 -- +public double getBonus()+ que retorna o bônus do gerente
 -- +public void setBonus(double aBonus)+ que define o bônus do gerente
 -- +public double getPagamento()+ que retorna o valor do pagamento (igual ao salário mais o bônus)
 - que tenha o método para imprimir seus dados
 -- +public void relatorio()+ que imprime o nome da classe ("Gerente"), o id, o nome, o salário, o bônus e o pagamento


= Pare Aqui! Até aqui você já deve ter testado as classes que você já fez!

=== Continuação...

== Classe Nota

~~~
{}{img_left}{diagrama_nota.svg}{Diagrama do Programa Pessoa}{}{}{}
~~~

Uma classe que modele uma Nota do boletim de um aluno, subclasse de Funcionario, 
 - que tenha o campo +private+
 -- "valor", que seja um +double+, 
 - que tenha o /constructor/
 -- +public Nota(double aNota)+ que garanta que a nota esteja entre 0.0 e 10.0
 - que tenha os métodos de acesso aos campos
 -- +public double getNota()+ que retorna o valor da nota
 - que tenha o método de converter para uma +String+
 -- +public String toString()+ que retorna uma +String+ com o valor "/valorDaNota/ pontos"
 

== Classe Boletim

~~~
{}{img_left}{diagrama_boletim.svg}{Diagrama do Programa Pessoa}{}{}{}
~~~

Uma classe que modele o boletim de um aluno
 - que tenha os campos +private+
 -- "notaNP1", que seja uma +Nota+, 
 -- "notaNP2", que seja uma +Nota+, 
 - que tenha os métodos de acesso aos campos
 -- +public double getNotaNP1()+ que retorna o valor da nota da NP1
 -- +public double getNotaNP2()+ que retorna o valor da nota da NP2
 -- +public void setNotaNP1(Nota aNota)+ que define o valor da nota da NP1
 -- +public void setNotaNP2(Nota aNota)+ que define o valor da nota da NP2
 - que faça /overload/ dos métodos de definição das notas, usando +double+
 -- +public void setNotaNP1(double aNota)+ que define o valor da nota da NP1
 -- +public void setNotaNP2(double aNota)+ que define o valor da nota da NP2
 - que calcule a média das notas
 -- +public double media()+ que retorna o valor da média das duas notas
 
 
 
== Classe Aluno

~~~
{}{img_left}{diagrama_aluno.svg}{Diagrama do Programa Pessoa}{}{}{}
~~~

Uma classe que modele um aluno
 - que tenha o campo +private+
 -- "boletim", que seja um +Boletim+, 
 - que tenha os métodos de acesso aos campos do boletim
 -- +public double getNotaNP1()+ que retorna o valor da nota da NP1
 -- +public double getNotaNP2()+ que retorna o valor da nota da NP2
 -- +public void setNotaNP1(Nota aNota)+ que define o valor da nota da NP1
 -- +public void setNotaNP2(Nota aNota)+ que define o valor da nota da NP2
 - que faça /overload/ dos métodos de definição das notas, usando +double+
 -- +public void setNotaNP1(double aNota)+ que define o valor da nota da NP1
 -- +public void setNotaNP2(double aNota)+ que define o valor da nota da NP2
 - que tenha o método para imprimir seus dados
 -- +public void relatorio()+ que
 --- imprime o nome da classe ("Aluno"), o id, o nome, as notas e a média;
 --- imprime a mensagem "O aluno passou direto", caso a média seja maior, ou igual, a 7.0,
 --- imprime a mensagem "O aluno não passou direto", caso contrário.
 
 
 
 

